# This workflow will install Python dependencies based on poetry.lock, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: libpythonpro CI

on:
  push:
    branches: ["7-optimise-workflow-script"]
  pull_request:
    branches: ["7-optimise-workflow-script"]

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: "3.10"
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction

      - name: Lint with flake8
        run: |
          poetry add flake8
          source .venv/bin/activate
          # stop the build if there are Python syntax errors or undefined names
          flake8 --count --select=E9,F63,F7,F82 --show-source --statistics libpythonpro
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 --count --exit-zero --max-complexity=10 --max-line-length=79 --statistics libpythonpro

      - name: Test with pytest
        run: |
          poetry add pytest
          source .venv/bin/activate
          pytest libpythonpro -ra -q --doctest-modules --cov=libpythonpro --cov-report=xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
